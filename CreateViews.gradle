import java.nio.file.Files
import java.nio.file.Paths

import static java.nio.file.StandardOpenOption.CREATE
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING

task createViews() {
    println "Creating View Classes"

    def destinationFolder = new File("${projectDir.getCanonicalPath()}/src/main/java/views")
    destinationFolder.mkdir()
    def toScan = new File("${projectDir.getCanonicalPath()}/src/main/webapp/WEB-INF")

    Map<String, String> filesToCompile = new HashMap<>()

    createFiles(List.of(toScan.listFiles()), filesToCompile, "Views")

    filesToCompile.forEach { name, code -> createJavaFiles(name, code, destinationFolder) }
}

def static createFiles(List<File> theFiles, Map<String, String> filesToCompile, String className) {

    List<File> folders = new ArrayList<>()
    List<File> files = new ArrayList<>()

    for (File file : theFiles) {
        if (file.isDirectory()) {
            folders.add(file)
            createFiles(List.of(file.listFiles()), filesToCompile, file.getName().capitalize())
        } else if (file.getName().endsWith(".jsp")) {
            files.add(file)
        }
    }

    def fileVariables = getAllFileVariables(files)

    def folderVariables = getAllFolderVariables(folders)

    String theClass = createClass(className, fileVariables, folderVariables)

    filesToCompile.put(className, theClass)

}

static String getAllFileVariables(List<File> files) {
    def filesString = new StringBuilder()
    files.stream()
            .map { createFileStringVariable(it) }
            .forEach { filesString.append(it) }

    return filesString.toString();
}

static String getAllFolderVariables(List<File> folders) {
    def folderString = new StringBuilder()
    folders.stream()
            .map { createFolderStringVariables(it) }
            .forEach { folderString.append(it) }

    return folderString.toString();
}

static String createClass(String className, String fileVariables, String folderVariables) {
    return """ 
package views;\n
public class ${className} {\n
    public static ${className} ${className.toUpperCase()}  = new ${className}();\n
${fileVariables} \n
${folderVariables}
}"""

}

static def createFileStringVariable(File file) {
    try {
        String variableName = file.getName()
                .replace(".jsp", "")
                .toUpperCase()
                .replace('-', '_')

        String path = file.getCanonicalPath()

        String variableValue = path.substring(path.indexOf("WEB-INF"))
                .replace("\\", "\\\\")

        return "\tpublic String ${variableName} = \"${variableValue}\";\n"

    } catch (Exception e) {
        e.printStackTrace()
        return ""
    }
}

static def createFolderStringVariables(File folder) {
    try {
        def className = folder.getName()
                .capitalize()
        def variableName = className.toUpperCase()

        return "\tpublic ${className} ${variableName} = new ${className} ();\n"

    } catch (Exception e) {
        e.printStackTrace()
        return ""
    }
}

static def createJavaFiles(String javaClassName, String code, File destinationFolder) {
    try {
        File javaFile = new File(destinationFolder.getCanonicalPath() + "\\" + javaClassName + ".java")
        Files.write(Paths.get(javaFile.toURI()), code.getBytes(), CREATE, TRUNCATE_EXISTING)

    } catch (Exception e) {
        e.printStackTrace()
    }

}