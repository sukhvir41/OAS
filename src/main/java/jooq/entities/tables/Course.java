/*
 * This file is generated by jOOQ.
 */
package jooq.entities.tables;


import jooq.entities.Indexes;
import jooq.entities.Keys;
import jooq.entities.Public;
import jooq.entities.tables.records.CourseRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.12"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Course extends TableImpl<CourseRecord> {

    private static final long serialVersionUID = -1446938599;

    /**
     * The reference instance of <code>public.course</code>
     */
    public static final Course COURSE = new Course();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CourseRecord> getRecordType() {
        return CourseRecord.class;
    }

    /**
     * The column <code>public.course.id</code>.
     */
    public final TableField<CourseRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.course.name</code>.
     */
    public final TableField<CourseRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.course.department_fid</code>.
     */
    public final TableField<CourseRecord, Long> DEPARTMENT_FID = createField("department_fid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.course</code> table reference
     */
    public Course() {
        this(DSL.name("course"), null);
    }

    /**
     * Create an aliased <code>public.course</code> table reference
     */
    public Course(String alias) {
        this(DSL.name(alias), COURSE);
    }

    /**
     * Create an aliased <code>public.course</code> table reference
     */
    public Course(Name alias) {
        this(alias, COURSE);
    }

    private Course(Name alias, Table<CourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Course(Name alias, Table<CourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Course(Table<O> child, ForeignKey<O, CourseRecord> key) {
        super(child, key, COURSE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COURSE_NAME_INDEX, Indexes.COURSE_PKEY, Indexes.UNIQUE_COURSE_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CourseRecord> getPrimaryKey() {
        return Keys.COURSE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CourseRecord>> getKeys() {
        return Arrays.<UniqueKey<CourseRecord>>asList(Keys.COURSE_PKEY, Keys.UNIQUE_COURSE_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CourseRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CourseRecord, ?>>asList(Keys.COURSE__DEPARTMENT_FOREIGN_KEY);
    }

    public Department department() {
        return new Department(this, Keys.COURSE__DEPARTMENT_FOREIGN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Course as(String alias) {
        return new Course(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Course as(Name alias) {
        return new Course(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Course rename(String name) {
        return new Course(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Course rename(Name name) {
        return new Course(name, null);
    }
}
