/*
 * This file is generated by jOOQ.
 */
package jooq.entities.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import jooq.entities.Indexes;
import jooq.entities.Keys;
import jooq.entities.Public;
import jooq.entities.tables.records.TeacherDepartmentLinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeacherDepartmentLink extends TableImpl<TeacherDepartmentLinkRecord> {

    private static final long serialVersionUID = -1773366919;

    /**
     * The reference instance of <code>public.teacher_department_link</code>
     */
    public static final TeacherDepartmentLink TEACHER_DEPARTMENT_LINK = new TeacherDepartmentLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeacherDepartmentLinkRecord> getRecordType() {
        return TeacherDepartmentLinkRecord.class;
    }

    /**
     * The column <code>public.teacher_department_link.teacher_fid</code>.
     */
    public final TableField<TeacherDepartmentLinkRecord, UUID> TEACHER_FID = createField("teacher_fid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.teacher_department_link.department_fid</code>.
     */
    public final TableField<TeacherDepartmentLinkRecord, Long> DEPARTMENT_FID = createField("department_fid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.teacher_department_link</code> table reference
     */
    public TeacherDepartmentLink() {
        this(DSL.name("teacher_department_link"), null);
    }

    /**
     * Create an aliased <code>public.teacher_department_link</code> table reference
     */
    public TeacherDepartmentLink(String alias) {
        this(DSL.name(alias), TEACHER_DEPARTMENT_LINK);
    }

    /**
     * Create an aliased <code>public.teacher_department_link</code> table reference
     */
    public TeacherDepartmentLink(Name alias) {
        this(alias, TEACHER_DEPARTMENT_LINK);
    }

    private TeacherDepartmentLink(Name alias, Table<TeacherDepartmentLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeacherDepartmentLink(Name alias, Table<TeacherDepartmentLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TeacherDepartmentLink(Table<O> child, ForeignKey<O, TeacherDepartmentLinkRecord> key) {
        super(child, key, TEACHER_DEPARTMENT_LINK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEACHER_DEPARTMENT_LINK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TeacherDepartmentLinkRecord> getPrimaryKey() {
        return Keys.TEACHER_DEPARTMENT_LINK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TeacherDepartmentLinkRecord>> getKeys() {
        return Arrays.<UniqueKey<TeacherDepartmentLinkRecord>>asList(Keys.TEACHER_DEPARTMENT_LINK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TeacherDepartmentLinkRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeacherDepartmentLinkRecord, ?>>asList(Keys.TEACHER_DEPARTMENT_LINK__TEACHER_DEPARTMENT_LINK_TEACHER_FOREIGN_KEY, Keys.TEACHER_DEPARTMENT_LINK__TEACHER_DEPARTMENT_LINK_DEPARTMENT_FOREIGN_KEY);
    }

    public Teacher teacher() {
        return new Teacher(this, Keys.TEACHER_DEPARTMENT_LINK__TEACHER_DEPARTMENT_LINK_TEACHER_FOREIGN_KEY);
    }

    public Department department() {
        return new Department(this, Keys.TEACHER_DEPARTMENT_LINK__TEACHER_DEPARTMENT_LINK_DEPARTMENT_FOREIGN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TeacherDepartmentLink as(String alias) {
        return new TeacherDepartmentLink(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TeacherDepartmentLink as(Name alias) {
        return new TeacherDepartmentLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeacherDepartmentLink rename(String name) {
        return new TeacherDepartmentLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeacherDepartmentLink rename(Name name) {
        return new TeacherDepartmentLink(name, null);
    }
}
