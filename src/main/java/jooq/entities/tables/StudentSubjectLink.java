/*
 * This file is generated by jOOQ.
 */
package jooq.entities.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import jooq.entities.Indexes;
import jooq.entities.Keys;
import jooq.entities.Public;
import jooq.entities.tables.records.StudentSubjectLinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentSubjectLink extends TableImpl<StudentSubjectLinkRecord> {

    private static final long serialVersionUID = 2013397966;

    /**
     * The reference instance of <code>public.student_subject_link</code>
     */
    public static final StudentSubjectLink STUDENT_SUBJECT_LINK = new StudentSubjectLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentSubjectLinkRecord> getRecordType() {
        return StudentSubjectLinkRecord.class;
    }

    /**
     * The column <code>public.student_subject_link.student_fid</code>.
     */
    public final TableField<StudentSubjectLinkRecord, UUID> STUDENT_FID = createField("student_fid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.student_subject_link.subject_fid</code>.
     */
    public final TableField<StudentSubjectLinkRecord, Long> SUBJECT_FID = createField("subject_fid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.student_subject_link</code> table reference
     */
    public StudentSubjectLink() {
        this(DSL.name("student_subject_link"), null);
    }

    /**
     * Create an aliased <code>public.student_subject_link</code> table reference
     */
    public StudentSubjectLink(String alias) {
        this(DSL.name(alias), STUDENT_SUBJECT_LINK);
    }

    /**
     * Create an aliased <code>public.student_subject_link</code> table reference
     */
    public StudentSubjectLink(Name alias) {
        this(alias, STUDENT_SUBJECT_LINK);
    }

    private StudentSubjectLink(Name alias, Table<StudentSubjectLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentSubjectLink(Name alias, Table<StudentSubjectLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> StudentSubjectLink(Table<O> child, ForeignKey<O, StudentSubjectLinkRecord> key) {
        super(child, key, STUDENT_SUBJECT_LINK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STUDENT_SUBJECT_LINK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudentSubjectLinkRecord> getPrimaryKey() {
        return Keys.STUDENT_SUBJECT_LINK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudentSubjectLinkRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentSubjectLinkRecord>>asList(Keys.STUDENT_SUBJECT_LINK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StudentSubjectLinkRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StudentSubjectLinkRecord, ?>>asList(Keys.STUDENT_SUBJECT_LINK__STUDENT_SUBJECT_LINK_STUDENT_FOREIGN_KEY, Keys.STUDENT_SUBJECT_LINK__STUDENT_SUBJECT_LINK_SUBJECT_FOREIGN_KEY);
    }

    public Student student() {
        return new Student(this, Keys.STUDENT_SUBJECT_LINK__STUDENT_SUBJECT_LINK_STUDENT_FOREIGN_KEY);
    }

    public Subject subject() {
        return new Subject(this, Keys.STUDENT_SUBJECT_LINK__STUDENT_SUBJECT_LINK_SUBJECT_FOREIGN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StudentSubjectLink as(String alias) {
        return new StudentSubjectLink(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StudentSubjectLink as(Name alias) {
        return new StudentSubjectLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentSubjectLink rename(String name) {
        return new StudentSubjectLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentSubjectLink rename(Name name) {
        return new StudentSubjectLink(name, null);
    }
}
