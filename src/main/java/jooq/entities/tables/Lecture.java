/*
 * This file is generated by jOOQ.
 */
package jooq.entities.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.entities.Indexes;
import jooq.entities.Keys;
import jooq.entities.Public;
import jooq.entities.tables.records.LectureRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lecture extends TableImpl<LectureRecord> {

    private static final long serialVersionUID = -1425798585;

    /**
     * The reference instance of <code>public.lecture</code>
     */
    public static final Lecture LECTURE = new Lecture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LectureRecord> getRecordType() {
        return LectureRecord.class;
    }

    /**
     * The column <code>public.lecture.id</code>.
     */
    public final TableField<LectureRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.lecture.count</code>.
     */
    public final TableField<LectureRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.lecture.date</code>.
     */
    public final TableField<LectureRecord, Timestamp> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.lecture.ended</code>.
     */
    public final TableField<LectureRecord, Boolean> ENDED = createField("ended", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.lecture.tcs_class_room_fid</code>.
     */
    public final TableField<LectureRecord, Long> TCS_CLASS_ROOM_FID = createField("tcs_class_room_fid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lecture.tcs_subject_fid</code>.
     */
    public final TableField<LectureRecord, Long> TCS_SUBJECT_FID = createField("tcs_subject_fid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.lecture</code> table reference
     */
    public Lecture() {
        this(DSL.name("lecture"), null);
    }

    /**
     * Create an aliased <code>public.lecture</code> table reference
     */
    public Lecture(String alias) {
        this(DSL.name(alias), LECTURE);
    }

    /**
     * Create an aliased <code>public.lecture</code> table reference
     */
    public Lecture(Name alias) {
        this(alias, LECTURE);
    }

    private Lecture(Name alias, Table<LectureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lecture(Name alias, Table<LectureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Lecture(Table<O> child, ForeignKey<O, LectureRecord> key) {
        super(child, key, LECTURE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LECTURE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LectureRecord> getPrimaryKey() {
        return Keys.LECTURE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LectureRecord>> getKeys() {
        return Arrays.<UniqueKey<LectureRecord>>asList(Keys.LECTURE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lecture as(String alias) {
        return new Lecture(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lecture as(Name alias) {
        return new Lecture(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lecture rename(String name) {
        return new Lecture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lecture rename(Name name) {
        return new Lecture(name, null);
    }
}
