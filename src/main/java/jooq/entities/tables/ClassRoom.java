/*
 * This file is generated by jOOQ.
 */
package jooq.entities.tables;


import jooq.entities.Indexes;
import jooq.entities.Keys;
import jooq.entities.Public;
import jooq.entities.tables.records.ClassRoomRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.12"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ClassRoom extends TableImpl<ClassRoomRecord> {

    private static final long serialVersionUID = 1260048777;

    /**
     * The reference instance of <code>public.class_room</code>
     */
    public static final ClassRoom CLASS_ROOM = new ClassRoom();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClassRoomRecord> getRecordType() {
        return ClassRoomRecord.class;
    }

    /**
     * The column <code>public.class_room.id</code>.
     */
    public final TableField<ClassRoomRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.class_room.division</code>.
     */
    public final TableField<ClassRoomRecord, String> DIVISION = createField("division", org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>public.class_room.minimum_subjects</code>.
     */
    public final TableField<ClassRoomRecord, Integer> MINIMUM_SUBJECTS = createField("minimum_subjects", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.class_room.name</code>.
     */
    public final TableField<ClassRoomRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.class_room.semester</code>.
     */
    public final TableField<ClassRoomRecord, Integer> SEMESTER = createField("semester", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.class_room.course_fid</code>.
     */
    public final TableField<ClassRoomRecord, Long> COURSE_FID = createField("course_fid", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.class_room</code> table reference
     */
    public ClassRoom() {
        this(DSL.name("class_room"), null);
    }

    /**
     * Create an aliased <code>public.class_room</code> table reference
     */
    public ClassRoom(String alias) {
        this(DSL.name(alias), CLASS_ROOM);
    }

    /**
     * Create an aliased <code>public.class_room</code> table reference
     */
    public ClassRoom(Name alias) {
        this(alias, CLASS_ROOM);
    }

    private ClassRoom(Name alias, Table<ClassRoomRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClassRoom(Name alias, Table<ClassRoomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ClassRoom(Table<O> child, ForeignKey<O, ClassRoomRecord> key) {
        super(child, key, CLASS_ROOM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLASS_ROOM_NAME, Indexes.CLASS_ROOM_NAME_INDEX, Indexes.CLASS_ROOM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClassRoomRecord> getPrimaryKey() {
        return Keys.CLASS_ROOM_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClassRoomRecord>> getKeys() {
        return Arrays.<UniqueKey<ClassRoomRecord>>asList(Keys.CLASS_ROOM_PKEY, Keys.CLASS_ROOM_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ClassRoomRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClassRoomRecord, ?>>asList(Keys.CLASS_ROOM__CLASS_COURSE_FOREIGN_KEY);
    }

    public Course course() {
        return new Course(this, Keys.CLASS_ROOM__CLASS_COURSE_FOREIGN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClassRoom as(String alias) {
        return new ClassRoom(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClassRoom as(Name alias) {
        return new ClassRoom(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClassRoom rename(String name) {
        return new ClassRoom(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClassRoom rename(Name name) {
        return new ClassRoom(name, null);
    }
}
